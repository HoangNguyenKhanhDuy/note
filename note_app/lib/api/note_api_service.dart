import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:note_app/models/note.dart';

class NoteAPIService {
  static const String _baseUrl = 'https://6804641479cb28fb3f5ae6e7.mockapi.io/api/v1/notes';

  // L·∫•y t·∫•t c·∫£ ghi ch√∫ t·ª´ API
  Future<List<Note>> getNotes() async {
    try {
      final response = await http.get(Uri.parse(_baseUrl));

      if (response.statusCode == 200) {
        print('üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API: ${response.body}');
        List jsonResponse = json.decode(response.body);
        return jsonResponse.map((note) => Note.fromMap(note)).toList();
      } else {
        throw Exception('üö´ Kh√¥ng th·ªÉ t·∫£i ghi ch√∫. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('‚ùó L·ªói k·∫øt n·ªëi: $e');
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh c·ªßa ghi ch√∫
  Future<void> updateNoteCompletion(String noteId, bool isCompleted) async {
    try {
      final url = Uri.parse('$_baseUrl/$noteId');
      final response = await http.patch(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'isCompleted': isCompleted}),
      );

      if (response.statusCode == 200) {
        print('‚úÖ Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh.');
      } else {
        print('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t. M√£ l·ªói: ${response.statusCode}');
        throw Exception('Failed to update note completion');
      }
    } catch (e) {
      throw Exception('‚ùó L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ghi ch√∫: $e');
    }
  }

  // Th√™m m·ªõi ghi ch√∫
  Future<Note> addNote(Note note) async {
    try {
      final response = await http.post(
        Uri.parse(_baseUrl),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(note.toMap()),
      );

      if (response.statusCode == 201) {
        return Note.fromMap(json.decode(response.body));
      } else {
        throw Exception('üö´ Kh√¥ng th·ªÉ th√™m ghi ch√∫. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('‚ùó L·ªói khi th√™m ghi ch√∫: $e');
    }
  }

  // C·∫≠p nh·∫≠t ghi ch√∫
  Future<Note> updateNote(Note note) async {
    try {
      final response = await http.put(
        Uri.parse('$_baseUrl/${note.id}'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(note.toMap()),
      );

      if (response.statusCode == 200) {
        return Note.fromMap(json.decode(response.body));
      } else {
        throw Exception('üö´ Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ghi ch√∫. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('‚ùó L·ªói khi c·∫≠p nh·∫≠t ghi ch√∫: $e');
    }
  }

  // X√≥a ghi ch√∫
  Future<void> deleteNote(String noteId) async {
    try {
      final response = await http.delete(
        Uri.parse('$_baseUrl/$noteId'),
      );

      if (response.statusCode == 200) {
        print("üóëÔ∏è ƒê√£ x√≥a ghi ch√∫ th√†nh c√¥ng.");
      } else {
        throw Exception('üö´ Kh√¥ng th·ªÉ x√≥a ghi ch√∫. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('‚ùó L·ªói khi x√≥a ghi ch√∫: $e');
    }
  }
}
